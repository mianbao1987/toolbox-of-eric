
;; Function search (search)


Pass statistics:
----------------


Pass statistics:
----------------

search (struct basic_block * bbD.4175)
{
  struct edge * eD.4180;
  struct vec_edge * veD.4179;
  struct basic_block * succ_bbD.4178;
  intD.0 count.11D.5608;
  intD.0 count.10D.5607;
  intD.0 D.5604;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  bbD.4175->visitedD.4144 = 1;
  veD.4179 = bbD.4175->succD.4149;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 3
  # PRED: 6 (true)
  eD.4180 = veD.4179->edgeD.4138;
  succ_bbD.4178 = eD.4180->targetD.4135;
  D.5604 = succ_bbD.4178->visitedD.4144;
  if (D.5604 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  eD.4180->typeD.4133 = 1;
  searchD.4176 (succ_bbD.4178);
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (false) 4 (fallthru)
  veD.4179 = veD.4179->nextD.4139;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 2 (fallthru) 5 (fallthru)
  if (veD.4179 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  count.10D.5607 = countD.4173;
  bbD.4175->dfs_orderD.4145 = count.10D.5607;
  count.10D.5607 = countD.4173;
  count.11D.5608 = count.10D.5607 - 1;
  countD.4173 = count.11D.5608;
  return;
  # SUCC: EXIT

}



;; Function depth_first_search (depth_first_search)


Pass statistics:
----------------


Pass statistics:
----------------

depth_first_search ()
{
  struct basic_block * bbD.4187;
  struct basic_block * D.5603;
  intD.0 count.9D.5602;
  struct control_flow_graph * cfg.8D.5601;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  cfg.8D.5601 = cfgD.4174;
  bbD.4187 = cfg.8D.5601->bbD.4157;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true)
  bbD.4187->visitedD.4144 = 0;
  bbD.4187 = bbD.4187->nextD.4151;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  if (bbD.4187 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  cfg.8D.5601 = cfgD.4174;
  count.9D.5602 = cfg.8D.5601->bb_numD.4153;
  countD.4173 = count.9D.5602;
  cfg.8D.5601 = cfgD.4174;
  D.5603 = cfg.8D.5601->entryD.4155;
  searchD.4176 (D.5603);
  return;
  # SUCC: EXIT

}



;; Function is_ancestor (is_ancestor)


Pass statistics:
----------------


Pass statistics:
----------------

is_ancestor (struct basic_block * sourceD.4191, struct basic_block * targetD.4192)
{
  struct edge * eD.4197;
  struct vec_edge * veD.4196;
  struct basic_block * bbD.4195;
  struct basic_block * D.5599;
  struct control_flow_graph * cfg.7D.5598;
  edge_type D.5595;
  intD.0 D.5594;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  bbD.4195 = targetD.4192;
  # SUCC: 3 (fallthru)

  # BLOCK 3
  # PRED: 2 (fallthru) 10 (true)
  if (bbD.4195 == sourceD.4191)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  D.5594 = 1;
  goto <bb 12>;
  # SUCC: 12 (fallthru)

  # BLOCK 5
  # PRED: 3 (false)
  veD.4196 = bbD.4195->predD.4147;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 6
  # PRED: 9 (true)
  eD.4197 = veD.4196->edgeD.4138;
  D.5595 = eD.4197->typeD.4133;
  if (D.5595 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
  # SUCC: 7 (true) 8 (false)

  # BLOCK 7
  # PRED: 6 (true)
  bbD.4195 = eD.4197->sourceD.4134;
  goto <bb 10>;
  # SUCC: 10 (fallthru)

  # BLOCK 8
  # PRED: 6 (false)
  veD.4196 = veD.4196->nextD.4139;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 5 (fallthru) 8 (fallthru)
  if (veD.4196 != 0B)
    goto <bb 6>;
  else
    goto <bb 10>;
  # SUCC: 6 (true) 10 (false)

  # BLOCK 10
  # PRED: 7 (fallthru) 9 (false)
  cfg.7D.5598 = cfgD.4174;
  D.5599 = cfg.7D.5598->entryD.4155;
  if (D.5599 != bbD.4195)
    goto <bb 3>;
  else
    goto <bb 11>;
  # SUCC: 3 (true) 11 (false)

  # BLOCK 11
  # PRED: 10 (false)
  D.5594 = 0;
  # SUCC: 12 (fallthru)

  # BLOCK 12
  # PRED: 4 (fallthru) 11 (fallthru)
  return D.5594;
  # SUCC: EXIT

}



;; Function mark_edge (mark_edge)


Pass statistics:
----------------


Pass statistics:
----------------

mark_edge (struct edge * eD.4203)
{
  struct basic_block * targetD.4207;
  struct basic_block * sourceD.4206;
  intD.0 D.5588;
  intD.0 D.5584;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  sourceD.4206 = eD.4203->sourceD.4134;
  targetD.4207 = eD.4203->targetD.4135;
  D.5584 = is_ancestorD.4193 (targetD.4207, sourceD.4206);
  if (D.5584 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 (true) 4 (false)

  # BLOCK 3
  # PRED: 2 (true)
  eD.4203->typeD.4133 = 3;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 4
  # PRED: 2 (false)
  D.5588 = is_ancestorD.4193 (sourceD.4206, targetD.4207);
  if (D.5588 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  eD.4203->typeD.4133 = 2;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  eD.4203->typeD.4133 = 4;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 3 (fallthru) 5 (fallthru) 6 (fallthru)
  return;
  # SUCC: EXIT

}



;; Function mark_edges (mark_edges)


Pass statistics:
----------------


Pass statistics:
----------------

mark_edges ()
{
  struct edge * eD.4212;
  struct control_flow_graph * cfgD.4211;
  edge_type D.5581;
  struct function * current_function.6D.5580;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  current_function.6D.5580 = current_functionD.4113;
  cfgD.4211 = current_function.6D.5580->cfgD.4162;
  eD.4212 = cfgD.4211->edgeD.4159;
  goto <bb 6>;
  # SUCC: 6 (fallthru)

  # BLOCK 3
  # PRED: 6 (true)
  D.5581 = eD.4212->typeD.4133;
  if (D.5581 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 (true) 5 (false)

  # BLOCK 4
  # PRED: 3 (true)
  mark_edgeD.4204 (eD.4212);
  # SUCC: 5 (fallthru)

  # BLOCK 5
  # PRED: 3 (false) 4 (fallthru)
  eD.4212 = eD.4212->nextD.4136;
  # SUCC: 6 (fallthru)

  # BLOCK 6
  # PRED: 2 (fallthru) 5 (fallthru)
  if (eD.4212 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 (true) 7 (false)

  # BLOCK 7
  # PRED: 6 (false)
  return;
  # SUCC: EXIT

}



;; Function calc_max_distance_recursive (calc_max_distance_recursive)


Pass statistics:
----------------


Pass statistics:
----------------

calc_max_distance_recursive (struct basic_block * bbD.4216)
{
  struct edge * eD.4222;
  struct vec_edge * veD.4221;
  intD.0 maxD.4220;
  intD.0 valD.4219;
  intD.0 D.5578;
  intD.0 D.5577;
  struct basic_block * D.5576;
  edge_type D.5573;
  intD.0 D.5570;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  maxD.4220 = 0;
  D.5570 = bbD.4216->max_distanceD.4146;
  if (D.5570 == 0)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 (true) 10 (false)

  # BLOCK 3
  # PRED: 2 (true)
  veD.4221 = bbD.4216->predD.4147;
  goto <bb 8>;
  # SUCC: 8 (fallthru)

  # BLOCK 4
  # PRED: 8 (true)
  eD.4222 = veD.4221->edgeD.4138;
  D.5573 = eD.4222->typeD.4133;
  if (D.5573 == 3)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  // predicted unlikely by continue predictor.
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  D.5576 = eD.4222->sourceD.4134;
  valD.4219 = calc_max_distance_recursiveD.4217 (D.5576);
  maxD.4220 = MAX_EXPR <valD.4219, maxD.4220>;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  veD.4221 = veD.4221->nextD.4139;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 3 (fallthru) 7 (fallthru)
  if (veD.4221 != 0B)
    goto <bb 4>;
  else
    goto <bb 9>;
  # SUCC: 4 (true) 9 (false)

  # BLOCK 9
  # PRED: 8 (false)
  D.5577 = maxD.4220 + 1;
  bbD.4216->max_distanceD.4146 = D.5577;
  # SUCC: 10 (fallthru)

  # BLOCK 10
  # PRED: 2 (false) 9 (fallthru)
  D.5578 = bbD.4216->max_distanceD.4146;
  return D.5578;
  # SUCC: EXIT

}



;; Function calc_max_distance (calc_max_distance)


Pass statistics:
----------------


Pass statistics:
----------------

calc_max_distance ()
{
  struct basic_block * bbD.4232;
  intD.0 maxD.4231;
  intD.0 valD.4230;
  intD.0 iftmp.5D.5566;
  intD.0 D.5563;
  struct basic_block * D.5562;
  struct control_flow_graph * cfg.4D.5561;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  maxD.4231 = 0;
  depth_first_searchD.4185 ();
  mark_edgesD.4209 ();
  cfg.4D.5561 = cfgD.4174;
  D.5562 = cfg.4D.5561->exitD.4156;
  maxD.4231 = calc_max_distance_recursiveD.4217 (D.5562);
  cfg.4D.5561 = cfgD.4174;
  bbD.4232 = cfg.4D.5561->bbD.4157;
  goto <bb 9>;
  # SUCC: 9 (fallthru)

  # BLOCK 3
  # PRED: 9 (true)
  D.5563 = bbD.4232->max_distanceD.4146;
  if (D.5563 == 0)
    goto <bb 4>;
  else
    goto <bb 8>;
  # SUCC: 4 (true) 8 (false)

  # BLOCK 4
  # PRED: 3 (true)
  valD.4230 = calc_max_distance_recursiveD.4217 (bbD.4232);
  if (maxD.4231 <= valD.4230)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 (true) 6 (false)

  # BLOCK 5
  # PRED: 4 (true)
  iftmp.5D.5566 = valD.4230 + 1;
  goto <bb 7>;
  # SUCC: 7 (fallthru)

  # BLOCK 6
  # PRED: 4 (false)
  iftmp.5D.5566 = maxD.4231;
  # SUCC: 7 (fallthru)

  # BLOCK 7
  # PRED: 5 (fallthru) 6 (fallthru)
  maxD.4231 = iftmp.5D.5566;
  # SUCC: 8 (fallthru)

  # BLOCK 8
  # PRED: 3 (false) 7 (fallthru)
  bbD.4232 = bbD.4232->nextD.4151;
  # SUCC: 9 (fallthru)

  # BLOCK 9
  # PRED: 2 (fallthru) 8 (fallthru)
  if (bbD.4232 != 0B)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 (true) 10 (false)

  # BLOCK 10
  # PRED: 9 (false)
  cfg.4D.5561 = cfgD.4174;
  D.5562 = cfg.4D.5561->exitD.4156;
  D.5562->max_distanceD.4146 = maxD.4231;
  return;
  # SUCC: EXIT

}



;; Function fine_tune_cfg (fine_tune_cfg)


Pass statistics:
----------------


Pass statistics:
----------------

fine_tune_cfg ()
{
  struct function * current_function.3D.5560;
  struct control_flow_graph * cfg.2D.5559;
  struct function * current_function.1D.5558;
  struct function * first_function.0D.5557;

  # BLOCK 2
  # PRED: ENTRY (fallthru)
  first_function.0D.5557 = first_functionD.4111;
  current_functionD.4113 = first_function.0D.5557;
  goto <bb 4>;
  # SUCC: 4 (fallthru)

  # BLOCK 3
  # PRED: 4 (true)
  current_function.1D.5558 = current_functionD.4113;
  cfg.2D.5559 = current_function.1D.5558->cfgD.4162;
  cfgD.4174 = cfg.2D.5559;
  calc_max_distanceD.4228 ();
  current_function.1D.5558 = current_functionD.4113;
  current_function.3D.5560 = current_function.1D.5558->nextD.4163;
  current_functionD.4113 = current_function.3D.5560;
  # SUCC: 4 (fallthru)

  # BLOCK 4
  # PRED: 2 (fallthru) 3 (fallthru)
  current_function.1D.5558 = current_functionD.4113;
  if (current_function.1D.5558 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 (true) 5 (false)

  # BLOCK 5
  # PRED: 4 (false)
  return;
  # SUCC: EXIT

}


