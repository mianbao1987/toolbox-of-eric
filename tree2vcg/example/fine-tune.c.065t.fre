
;; Function search (search)


Pass statistics:
----------------

SCC consists of: .MEM_13(D) 
Setting value number of .MEM_13(D) to .MEM_13(D) (changed)
SCC consists of: bb_2(D) 
Setting value number of bb_2(D) to bb_2(D)
SCC consists of: .MEM_14 
Value numbering .MEM_14 stmt = bb_2(D)->visited = 1;
No store match
Value numbering store bb_2(D)->visited to 1
Setting value number of .MEM_14 to .MEM_14 (changed)
SCC consists of: ve_3 
Value numbering ve_3 stmt = ve_3 = bb_2(D)->succ;
Setting value number of ve_3 to ve_3 (changed)
SCC consists of: ve_1 .MEM_12 e_4 succ_bb_5 .MEM_15 .MEM_16 .MEM_11 ve_7 
Value numbering ve_1 stmt = ve_1 = PHI <ve_3(2), ve_7(5)>
Setting value number of ve_1 to ve_3 (changed)
Value numbering .MEM_12 stmt = .MEM_12 = PHI <.MEM_14(2), .MEM_11(5)>
Setting value number of .MEM_12 to .MEM_14 (changed)
Value numbering e_4 stmt = e_4 = ve_1->edge;
Setting value number of e_4 to e_4 (changed)
Value numbering succ_bb_5 stmt = succ_bb_5 = e_4->target;
Setting value number of succ_bb_5 to succ_bb_5 (changed)
Value numbering .MEM_15 stmt = e_4->type = 1;
No store match
Value numbering store e_4->type to 1
Setting value number of .MEM_15 to .MEM_15 (changed)
Value numbering .MEM_16 stmt = search (succ_bb_5);
Setting value number of .MEM_16 to .MEM_16 (changed)
Value numbering .MEM_11 stmt = .MEM_11 = PHI <.MEM_12(3), .MEM_16(4)>
Setting value number of .MEM_11 to .MEM_11 (changed)
Value numbering ve_7 stmt = ve_7 = ve_1->next;
Setting value number of ve_7 to ve_7 (changed)
Value numbering ve_1 stmt = ve_1 = PHI <ve_3(2), ve_7(5)>
Setting value number of ve_1 to ve_1 (changed)
Value numbering .MEM_12 stmt = .MEM_12 = PHI <.MEM_14(2), .MEM_11(5)>
Setting value number of .MEM_12 to .MEM_12 (changed)
Value numbering e_4 stmt = e_4 = ve_1->edge;
Setting value number of e_4 to e_4
Value numbering succ_bb_5 stmt = succ_bb_5 = e_4->target;
Setting value number of succ_bb_5 to succ_bb_5
Value numbering .MEM_15 stmt = e_4->type = 1;
No store match
Value numbering store e_4->type to 1
Setting value number of .MEM_15 to .MEM_15
Value numbering .MEM_16 stmt = search (succ_bb_5);
Setting value number of .MEM_16 to .MEM_16
Value numbering .MEM_11 stmt = .MEM_11 = PHI <.MEM_12(3), .MEM_16(4)>
Setting value number of .MEM_11 to .MEM_11
Value numbering ve_7 stmt = ve_7 = ve_1->next;
Setting value number of ve_7 to ve_7
Value numbering ve_1 stmt = ve_1 = PHI <ve_3(2), ve_7(5)>
Setting value number of ve_1 to ve_1
Value numbering .MEM_12 stmt = .MEM_12 = PHI <.MEM_14(2), .MEM_11(5)>
Setting value number of .MEM_12 to .MEM_12
Value numbering e_4 stmt = e_4 = ve_1->edge;
Setting value number of e_4 to e_4
Value numbering succ_bb_5 stmt = succ_bb_5 = e_4->target;
Setting value number of succ_bb_5 to succ_bb_5
Value numbering .MEM_15 stmt = e_4->type = 1;
No store match
Value numbering store e_4->type to 1
Setting value number of .MEM_15 to .MEM_15
Value numbering .MEM_16 stmt = search (succ_bb_5);
Setting value number of .MEM_16 to .MEM_16
Value numbering .MEM_11 stmt = .MEM_11 = PHI <.MEM_12(3), .MEM_16(4)>
Setting value number of .MEM_11 to .MEM_11
Value numbering ve_7 stmt = ve_7 = ve_1->next;
Setting value number of ve_7 to ve_7
SCC consists of: D.5604_6 
Value numbering D.5604_6 stmt = D.5604_6 = succ_bb_5->visited;
Setting value number of D.5604_6 to D.5604_6 (changed)
SCC consists of: count.10_8 
Value numbering count.10_8 stmt = count.10_8 = count;
Setting value number of count.10_8 to count.10_8 (changed)
SCC consists of: .MEM_17 
Value numbering .MEM_17 stmt = bb_2(D)->dfs_order = count.10_8;
No store match
Value numbering store bb_2(D)->dfs_order to count.10_8
Setting value number of .MEM_17 to .MEM_17 (changed)
SCC consists of: count.10_9 
Value numbering count.10_9 stmt = count.10_9 = count;
Setting value number of count.10_9 to count.10_8 (changed)
SCC consists of: count.11_10 
Value numbering count.11_10 stmt = count.11_10 = count.10_9 - 1;
RHS count.10_9 - 1 simplified to count.10_8 + -1 has constants 1
Setting value number of count.11_10 to count.11_10 (changed)
Value numbers:
count.10_9 = count.10_8
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := { bb_2(D) (0004) }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { bb_2(D) (0004), ve_3 (0005) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { bb_2(D) (0004), ve_3 (0005), ve_1 (0003), e_4 (0006), succ_bb_5 (0007), D.5604_6 (0008) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { bb_2(D) (0004), ve_3 (0005), ve_1 (0003), e_4 (0006), succ_bb_5 (0007), D.5604_6 (0008) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { bb_2(D) (0004), ve_3 (0005), ve_1 (0003), e_4 (0006), succ_bb_5 (0007), D.5604_6 (0008), ve_7 (0009) }
exp_gen[6] := {  }
phi_gen[6] := { ve_1 (0003) }
tmp_gen[6] := {  }
avail_out[6] := { bb_2(D) (0004), ve_3 (0005), ve_1 (0003) }
exp_gen[7] := {  }
phi_gen[7] := {  }
tmp_gen[7] := {  }
avail_out[7] := { bb_2(D) (0004), ve_3 (0005), ve_1 (0003), count.10_8 (0010), count.11_10 (0011) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }
Replaced count with count.10_8 in count.10_9 = count;

Pass statistics:
----------------
SCC iterations == 3: 1
Eliminated: 1

search (struct basic_block * bbD.4175)
{
  struct edge * eD.4180;
  struct vec_edge * veD.4179;
  struct basic_block * succ_bbD.4178;
  intD.0 count.11D.5608;
  intD.0 count.10D.5607;
  intD.0 D.5604;

  # BLOCK 2 freq:900
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # .MEMD.5609_14 = VDEF <.MEMD.5609_13(D)>
  bbD.4175_2(D)->visitedD.4144 = 1;
  # VUSE <.MEMD.5609_14>
  veD.4179_3 = bbD.4175_2(D)->succD.4149;
  # DEBUG veD.4179 => veD.4179_3
  goto <bb 6>;
  # SUCC: 6 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:9100
  # PRED: 6 [91.0%]  (true,exec)
  # VUSE <.MEMD.5609_12>
  eD.4180_4 = veD.4179_1->edgeD.4138;
  # DEBUG eD.4180 => eD.4180_4
  # VUSE <.MEMD.5609_12>
  succ_bbD.4178_5 = eD.4180_4->targetD.4135;
  # DEBUG succ_bbD.4178 => succ_bbD.4178_5
  # VUSE <.MEMD.5609_12>
  D.5604_6 = succ_bbD.4178_5->visitedD.4144;
  if (D.5604_6 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 [29.0%]  (true,exec) 5 [71.0%]  (false,exec)

  # BLOCK 4 freq:2639
  # PRED: 3 [29.0%]  (true,exec)
  # .MEMD.5609_15 = VDEF <.MEMD.5609_12>
  eD.4180_4->typeD.4133 = 1;
  # .MEMD.5609_16 = VDEF <.MEMD.5609_15>
  searchD.4176 (succ_bbD.4178_5);
  # SUCC: 5 [100.0%]  (fallthru,exec)

  # BLOCK 5 freq:9100
  # PRED: 3 [71.0%]  (false,exec) 4 [100.0%]  (fallthru,exec)
  # .MEMD.5609_11 = PHI <.MEMD.5609_12(3), .MEMD.5609_16(4)>
  # VUSE <.MEMD.5609_11>
  veD.4179_7 = veD.4179_1->nextD.4139;
  # DEBUG veD.4179 => veD.4179_7
  # SUCC: 6 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 6 freq:10000
  # PRED: 2 [100.0%]  (fallthru,exec) 5 [100.0%]  (fallthru,dfs_back,exec)
  # veD.4179_1 = PHI <veD.4179_3(2), veD.4179_7(5)>
  # .MEMD.5609_12 = PHI <.MEMD.5609_14(2), .MEMD.5609_11(5)>
  # DEBUG veD.4179 => veD.4179_1
  if (veD.4179_1 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 [91.0%]  (true,exec) 7 [9.0%]  (false,exec)

  # BLOCK 7 freq:900
  # PRED: 6 [9.0%]  (false,exec)
  # VUSE <.MEMD.5609_12>
  count.10D.5607_8 = countD.4173;
  # .MEMD.5609_17 = VDEF <.MEMD.5609_12>
  bbD.4175_2(D)->dfs_orderD.4145 = count.10D.5607_8;
  count.10D.5607_9 = count.10D.5607_8;
  count.11D.5608_10 = count.10D.5607_9 - 1;
  # .MEMD.5609_18 = VDEF <.MEMD.5609_17>
  countD.4173 = count.11D.5608_10;
  return;
  # SUCC: EXIT [100.0%] 

}



;; Function depth_first_search (depth_first_search)


Pass statistics:
----------------

SCC consists of: .MEM_10(D) 
Setting value number of .MEM_10(D) to .MEM_10(D) (changed)
SCC consists of: cfg.8_2 
Value numbering cfg.8_2 stmt = cfg.8_2 = cfg;
Setting value number of cfg.8_2 to cfg.8_2 (changed)
SCC consists of: bb_3 
Value numbering bb_3 stmt = bb_3 = cfg.8_2->bb;
Setting value number of bb_3 to bb_3 (changed)
SCC consists of: bb_1 .MEM_9 .MEM_11 bb_4 
Value numbering bb_1 stmt = bb_1 = PHI <bb_3(2), bb_4(3)>
Setting value number of bb_1 to bb_3 (changed)
Value numbering .MEM_9 stmt = .MEM_9 = PHI <.MEM_10(D)(2), .MEM_11(3)>
Setting value number of .MEM_9 to .MEM_10(D) (changed)
Value numbering .MEM_11 stmt = bb_1->visited = 0;
No store match
Value numbering store bb_1->visited to 0
Setting value number of .MEM_11 to .MEM_11 (changed)
Value numbering bb_4 stmt = bb_4 = bb_1->next;
Setting value number of bb_4 to bb_4 (changed)
Value numbering bb_1 stmt = bb_1 = PHI <bb_3(2), bb_4(3)>
Setting value number of bb_1 to bb_1 (changed)
Value numbering .MEM_9 stmt = .MEM_9 = PHI <.MEM_10(D)(2), .MEM_11(3)>
Setting value number of .MEM_9 to .MEM_9 (changed)
Value numbering .MEM_11 stmt = bb_1->visited = 0;
No store match
Value numbering store bb_1->visited to 0
Setting value number of .MEM_11 to .MEM_11
Value numbering bb_4 stmt = bb_4 = bb_1->next;
Setting value number of bb_4 to bb_4
Value numbering bb_1 stmt = bb_1 = PHI <bb_3(2), bb_4(3)>
Setting value number of bb_1 to bb_1
Value numbering .MEM_9 stmt = .MEM_9 = PHI <.MEM_10(D)(2), .MEM_11(3)>
Setting value number of .MEM_9 to .MEM_9
Value numbering .MEM_11 stmt = bb_1->visited = 0;
No store match
Value numbering store bb_1->visited to 0
Setting value number of .MEM_11 to .MEM_11
Value numbering bb_4 stmt = bb_4 = bb_1->next;
Setting value number of bb_4 to bb_4
SCC consists of: cfg.8_5 
Value numbering cfg.8_5 stmt = cfg.8_5 = cfg;
Setting value number of cfg.8_5 to cfg.8_2 (changed)
SCC consists of: count.9_6 
Value numbering count.9_6 stmt = count.9_6 = cfg.8_5->bb_num;
Setting value number of count.9_6 to count.9_6 (changed)
SCC consists of: .MEM_12 
Value numbering .MEM_12 stmt = count = count.9_6;
No store match
Value numbering store count to count.9_6
Setting value number of .MEM_12 to .MEM_12 (changed)
SCC consists of: cfg.8_7 
Value numbering cfg.8_7 stmt = cfg.8_7 = cfg;
Setting value number of cfg.8_7 to cfg.8_2 (changed)
SCC consists of: D.5603_8 
Value numbering D.5603_8 stmt = D.5603_8 = cfg.8_7->entry;
Setting value number of D.5603_8 to D.5603_8 (changed)
Value numbers:
cfg.8_5 = cfg.8_2
cfg.8_7 = cfg.8_2
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := {  }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { cfg.8_2 (0003), bb_3 (0004) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { cfg.8_2 (0003), bb_3 (0004), bb_1 (0002), bb_4 (0005) }
exp_gen[4] := {  }
phi_gen[4] := { bb_1 (0002) }
tmp_gen[4] := {  }
avail_out[4] := { cfg.8_2 (0003), bb_3 (0004), bb_1 (0002) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { cfg.8_2 (0003), bb_3 (0004), bb_1 (0002), count.9_6 (0006), D.5603_8 (0007) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }
Replaced cfg with cfg.8_2 in cfg.8_5 = cfg;
Replaced cfg with cfg.8_2 in cfg.8_7 = cfg;

Pass statistics:
----------------
SCC iterations == 3: 1
Eliminated: 2

depth_first_search ()
{
  struct basic_block * bbD.4187;
  struct basic_block * D.5603;
  intD.0 count.9D.5602;
  struct control_flow_graph * cfg.8D.5601;

  # BLOCK 2 freq:900
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # VUSE <.MEMD.5610_10(D)>
  cfg.8D.5601_2 = cfgD.4174;
  # VUSE <.MEMD.5610_10(D)>
  bbD.4187_3 = cfg.8D.5601_2->bbD.4157;
  # DEBUG bbD.4187 => bbD.4187_3
  goto <bb 4>;
  # SUCC: 4 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:9100
  # PRED: 4 [91.0%]  (true,exec)
  # .MEMD.5610_11 = VDEF <.MEMD.5610_9>
  bbD.4187_1->visitedD.4144 = 0;
  # VUSE <.MEMD.5610_11>
  bbD.4187_4 = bbD.4187_1->nextD.4151;
  # DEBUG bbD.4187 => bbD.4187_4
  # SUCC: 4 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 4 freq:10000
  # PRED: 2 [100.0%]  (fallthru,exec) 3 [100.0%]  (fallthru,dfs_back,exec)
  # bbD.4187_1 = PHI <bbD.4187_3(2), bbD.4187_4(3)>
  # .MEMD.5610_9 = PHI <.MEMD.5610_10(D)(2), .MEMD.5610_11(3)>
  # DEBUG bbD.4187 => bbD.4187_1
  if (bbD.4187_1 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 [91.0%]  (true,exec) 5 [9.0%]  (false,exec)

  # BLOCK 5 freq:900
  # PRED: 4 [9.0%]  (false,exec)
  cfg.8D.5601_5 = cfg.8D.5601_2;
  # VUSE <.MEMD.5610_9>
  count.9D.5602_6 = cfg.8D.5601_5->bb_numD.4153;
  # .MEMD.5610_12 = VDEF <.MEMD.5610_9>
  countD.4173 = count.9D.5602_6;
  cfg.8D.5601_7 = cfg.8D.5601_2;
  # VUSE <.MEMD.5610_12>
  D.5603_8 = cfg.8D.5601_7->entryD.4155;
  # .MEMD.5610_13 = VDEF <.MEMD.5610_12>
  searchD.4176 (D.5603_8);
  return;
  # SUCC: EXIT [100.0%] 

}



;; Function is_ancestor (is_ancestor)


Pass statistics:
----------------

SCC consists of: target_5(D) 
Setting value number of target_5(D) to target_5(D)
SCC consists of: .MEM_17(D) 
Setting value number of .MEM_17(D) to .MEM_17(D) (changed)
SCC consists of: bb_1 ve_9 ve_3 e_10 ve_13 bb_12 bb_2 
Value numbering bb_1 stmt = bb_1 = PHI <target_5(D)(2), bb_2(11)>
Setting value number of bb_1 to target_5(D) (changed)
Value numbering ve_9 stmt = ve_9 = bb_1->pred;
Setting value number of ve_9 to ve_9 (changed)
Value numbering ve_3 stmt = ve_3 = PHI <ve_9(4), ve_13(7)>
Setting value number of ve_3 to ve_9 (changed)
Value numbering e_10 stmt = e_10 = ve_3->edge;
Setting value number of e_10 to e_10 (changed)
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13 (changed)
Value numbering bb_12 stmt = bb_12 = e_10->source;
Setting value number of bb_12 to bb_12 (changed)
Value numbering bb_2 stmt = bb_2 = PHI <bb_12(6), bb_1(8)>
Setting value number of bb_2 to bb_2 (changed)
Value numbering bb_1 stmt = bb_1 = PHI <target_5(D)(2), bb_2(11)>
Setting value number of bb_1 to bb_1 (changed)
Value numbering ve_9 stmt = ve_9 = bb_1->pred;
Setting value number of ve_9 to ve_9
Value numbering ve_3 stmt = ve_3 = PHI <ve_9(4), ve_13(7)>
Setting value number of ve_3 to ve_3 (changed)
Value numbering e_10 stmt = e_10 = ve_3->edge;
Setting value number of e_10 to e_10
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13
Value numbering bb_12 stmt = bb_12 = e_10->source;
Setting value number of bb_12 to bb_12
Value numbering bb_2 stmt = bb_2 = PHI <bb_12(6), bb_1(8)>
Setting value number of bb_2 to bb_2
Value numbering bb_1 stmt = bb_1 = PHI <target_5(D)(2), bb_2(11)>
Setting value number of bb_1 to bb_1
Value numbering ve_9 stmt = ve_9 = bb_1->pred;
Setting value number of ve_9 to ve_9
Value numbering ve_3 stmt = ve_3 = PHI <ve_9(4), ve_13(7)>
Setting value number of ve_3 to ve_3
Value numbering e_10 stmt = e_10 = ve_3->edge;
Setting value number of e_10 to e_10
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13
Value numbering bb_12 stmt = bb_12 = e_10->source;
Setting value number of bb_12 to bb_12
Value numbering bb_2 stmt = bb_2 = PHI <bb_12(6), bb_1(8)>
Setting value number of bb_2 to bb_2
SCC consists of: D.5594_4 
Value numbering D.5594_4 stmt = D.5594_4 = PHI <1(3), 0(9)>
Setting value number of D.5594_4 to D.5594_4 (changed)
SCC consists of: source_7(D) 
Setting value number of source_7(D) to source_7(D)
SCC consists of: D.5595_11 
Value numbering D.5595_11 stmt = D.5595_11 = e_10->type;
Setting value number of D.5595_11 to D.5595_11 (changed)
SCC consists of: cfg.7_14 
Value numbering cfg.7_14 stmt = cfg.7_14 = cfg;
Setting value number of cfg.7_14 to cfg.7_14 (changed)
SCC consists of: D.5599_15 
Value numbering D.5599_15 stmt = D.5599_15 = cfg.7_14->entry;
Setting value number of D.5599_15 to D.5599_15 (changed)
Value numbers:
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := { target_5(D) (0005), source_7(D) (0006) }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { target_5(D) (0005), source_7(D) (0006) }
exp_gen[3] := {  }
phi_gen[3] := { bb_1 (0001) }
tmp_gen[3] := {  }
avail_out[3] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003), e_10 (0008), D.5595_11 (0009) }
exp_gen[6] := {  }
phi_gen[6] := {  }
tmp_gen[6] := {  }
avail_out[6] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003), e_10 (0008), D.5595_11 (0009), bb_12 (0010) }
exp_gen[7] := {  }
phi_gen[7] := {  }
tmp_gen[7] := {  }
avail_out[7] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003), e_10 (0008), D.5595_11 (0009), ve_13 (0011) }
exp_gen[8] := {  }
phi_gen[8] := { ve_3 (0003) }
tmp_gen[8] := {  }
avail_out[8] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003) }
exp_gen[9] := {  }
phi_gen[9] := { bb_2 (0002) }
tmp_gen[9] := {  }
avail_out[9] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003), bb_2 (0002), cfg.7_14 (0012), D.5599_15 (0013) }
exp_gen[11] := {  }
phi_gen[11] := {  }
tmp_gen[11] := {  }
avail_out[11] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), ve_9 (0007), ve_3 (0003), bb_2 (0002), cfg.7_14 (0012), D.5599_15 (0013) }
exp_gen[10] := {  }
phi_gen[10] := { D.5594_4 (0004) }
tmp_gen[10] := {  }
avail_out[10] := { target_5(D) (0005), source_7(D) (0006), bb_1 (0001), D.5594_4 (0004) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }

Pass statistics:
----------------
SCC iterations == 3: 1

is_ancestor (struct basic_block * sourceD.4191, struct basic_block * targetD.4192)
{
  struct edge * eD.4197;
  struct vec_edge * veD.4196;
  struct basic_block * bbD.4195;
  struct basic_block * D.5599;
  struct control_flow_graph * cfg.7D.5598;
  edge_type D.5595;
  intD.0 D.5594;

  # BLOCK 2 freq:165
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # DEBUG bbD.4195 => targetD.4192_5(D)
  # SUCC: 3 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:921
  # PRED: 2 [100.0%]  (fallthru,exec) 11 [100.0%]  (fallthru,dfs_back,exec)
  # bbD.4195_1 = PHI <targetD.4192_5(D)(2), bbD.4195_2(11)>
  # DEBUG bbD.4195 => bbD.4195_1
  if (bbD.4195_1 == sourceD.4191_7(D))
    goto <bb 10>;
  else
    goto <bb 4>;
  # SUCC: 10 [4.5%]  (true,exec) 4 [95.5%]  (false,exec)

  # BLOCK 4 freq:880
  # PRED: 3 [95.5%]  (false,exec)
  # VUSE <.MEMD.5611_17(D)>
  veD.4196_9 = bbD.4195_1->predD.4147;
  # DEBUG veD.4196 => veD.4196_9
  goto <bb 8>;
  # SUCC: 8 [100.0%]  (fallthru,exec)

  # BLOCK 5 freq:9550
  # PRED: 8 [95.5%]  (true,exec)
  # VUSE <.MEMD.5611_17(D)>
  eD.4197_10 = veD.4196_3->edgeD.4138;
  # DEBUG eD.4197 => eD.4197_10
  # VUSE <.MEMD.5611_17(D)>
  D.5595_11 = eD.4197_10->typeD.4133;
  if (D.5595_11 == 1)
    goto <bb 6>;
  else
    goto <bb 7>;
  # SUCC: 6 [4.5%]  (true,exec) 7 [95.5%]  (false,exec)

  # BLOCK 6 freq:430
  # PRED: 5 [4.5%]  (true,exec)
  # VUSE <.MEMD.5611_17(D)>
  bbD.4195_12 = eD.4197_10->sourceD.4134;
  # DEBUG bbD.4195 => bbD.4195_12
  goto <bb 9>;
  # SUCC: 9 [100.0%]  (fallthru,exec)

  # BLOCK 7 freq:9120
  # PRED: 5 [95.5%]  (false,exec)
  # VUSE <.MEMD.5611_17(D)>
  veD.4196_13 = veD.4196_3->nextD.4139;
  # DEBUG veD.4196 => veD.4196_13
  # SUCC: 8 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 8 freq:10000
  # PRED: 4 [100.0%]  (fallthru,exec) 7 [100.0%]  (fallthru,dfs_back,exec)
  # veD.4196_3 = PHI <veD.4196_9(4), veD.4196_13(7)>
  # DEBUG veD.4196 => veD.4196_3
  if (veD.4196_3 != 0B)
    goto <bb 5>;
  else
    goto <bb 9>;
  # SUCC: 5 [95.5%]  (true,exec) 9 [4.5%]  (false,exec)

  # BLOCK 9 freq:880
  # PRED: 6 [100.0%]  (fallthru,exec) 8 [4.5%]  (false,exec)
  # bbD.4195_2 = PHI <bbD.4195_12(6), bbD.4195_1(8)>
  # DEBUG bbD.4195 => bbD.4195_2
  # VUSE <.MEMD.5611_17(D)>
  cfg.7D.5598_14 = cfgD.4174;
  # VUSE <.MEMD.5611_17(D)>
  D.5599_15 = cfg.7D.5598_14->entryD.4155;
  if (D.5599_15 != bbD.4195_2)
    goto <bb 11>;
  else
    goto <bb 10>;
  # SUCC: 11 [86.0%]  (true,exec) 10 [14.0%]  (false,exec)

  # BLOCK 11 freq:757
  # PRED: 9 [86.0%]  (true,exec)
  goto <bb 3>;
  # SUCC: 3 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 10 freq:165
  # PRED: 3 [4.5%]  (true,exec) 9 [14.0%]  (false,exec)
  # D.5594_4 = PHI <1(3), 0(9)>
  return D.5594_4;
  # SUCC: EXIT [100.0%] 

}



;; Function mark_edge (mark_edge)


Pass statistics:
----------------

SCC consists of: e_1(D) 
Setting value number of e_1(D) to e_1(D)
SCC consists of: .MEM_6(D) 
Setting value number of .MEM_6(D) to .MEM_6(D) (changed)
SCC consists of: source_2 
Value numbering source_2 stmt = source_2 = e_1(D)->source;
Setting value number of source_2 to source_2 (changed)
SCC consists of: target_3 
Value numbering target_3 stmt = target_3 = e_1(D)->target;
Setting value number of target_3 to target_3 (changed)
SCC consists of: D.5584_4 
Value numbering D.5584_4 stmt = D.5584_4 = is_ancestor (target_3, source_2);
Setting value number of D.5584_4 to D.5584_4 (changed)
SCC consists of: D.5588_5 
Value numbering D.5588_5 stmt = D.5588_5 = is_ancestor (source_2, target_3);
Setting value number of D.5588_5 to D.5588_5 (changed)
Value numbers:
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := { e_1(D) (0001) }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004), D.5588_5 (0005) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004), D.5588_5 (0005) }
exp_gen[6] := {  }
phi_gen[6] := {  }
tmp_gen[6] := {  }
avail_out[6] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004), D.5588_5 (0005) }
exp_gen[7] := {  }
phi_gen[7] := {  }
tmp_gen[7] := {  }
avail_out[7] := { e_1(D) (0001), source_2 (0002), target_3 (0003), D.5584_4 (0004) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }

Pass statistics:
----------------

mark_edge (struct edge * eD.4203)
{
  struct basic_block * targetD.4207;
  struct basic_block * sourceD.4206;
  intD.0 D.5588;
  intD.0 D.5584;

  # BLOCK 2 freq:10000
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # VUSE <.MEMD.5612_6(D)>
  sourceD.4206_2 = eD.4203_1(D)->sourceD.4134;
  # DEBUG sourceD.4206 => sourceD.4206_2
  # VUSE <.MEMD.5612_6(D)>
  targetD.4207_3 = eD.4203_1(D)->targetD.4135;
  # DEBUG targetD.4207 => targetD.4207_3
  # VUSE <.MEMD.5612_6(D)>
  D.5584_4 = is_ancestorD.4193 (targetD.4207_3, sourceD.4206_2);
  if (D.5584_4 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
  # SUCC: 3 [61.0%]  (true,exec) 4 [39.0%]  (false,exec)

  # BLOCK 3 freq:6102
  # PRED: 2 [61.0%]  (true,exec)
  # .MEMD.5612_7 = VDEF <.MEMD.5612_6(D)>
  eD.4203_1(D)->typeD.4133 = 3;
  goto <bb 7>;
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 4 freq:3898
  # PRED: 2 [39.0%]  (false,exec)
  # VUSE <.MEMD.5612_6(D)>
  D.5588_5 = is_ancestorD.4193 (sourceD.4206_2, targetD.4207_3);
  if (D.5588_5 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 [39.0%]  (true,exec) 6 [61.0%]  (false,exec)

  # BLOCK 5 freq:1520
  # PRED: 4 [39.0%]  (true,exec)
  # .MEMD.5612_8 = VDEF <.MEMD.5612_6(D)>
  eD.4203_1(D)->typeD.4133 = 2;
  goto <bb 7>;
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 6 freq:2378
  # PRED: 4 [61.0%]  (false,exec)
  # .MEMD.5612_9 = VDEF <.MEMD.5612_6(D)>
  eD.4203_1(D)->typeD.4133 = 4;
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 7 freq:10000
  # PRED: 3 [100.0%]  (fallthru,exec) 5 [100.0%]  (fallthru,exec) 6 [100.0%]  (fallthru,exec)
  return;
  # SUCC: EXIT [100.0%] 

}



;; Function mark_edges (mark_edges)


Pass statistics:
----------------

SCC consists of: .MEM_9(D) 
Setting value number of .MEM_9(D) to .MEM_9(D) (changed)
SCC consists of: current_function.6_2 
Value numbering current_function.6_2 stmt = current_function.6_2 = current_function;
Setting value number of current_function.6_2 to current_function.6_2 (changed)
SCC consists of: cfg_3 
Value numbering cfg_3 stmt = cfg_3 = current_function.6_2->cfg;
Setting value number of cfg_3 to cfg_3 (changed)
SCC consists of: e_4 
Value numbering e_4 stmt = e_4 = cfg_3->edge;
Setting value number of e_4 to e_4 (changed)
SCC consists of: e_1 .MEM_8 .MEM_10 .MEM_7 e_6 
Value numbering e_1 stmt = e_1 = PHI <e_4(2), e_6(5)>
Setting value number of e_1 to e_4 (changed)
Value numbering .MEM_8 stmt = .MEM_8 = PHI <.MEM_9(D)(2), .MEM_7(5)>
Setting value number of .MEM_8 to .MEM_9(D) (changed)
Value numbering .MEM_10 stmt = mark_edge (e_1);
Setting value number of .MEM_10 to .MEM_10 (changed)
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_8(3), .MEM_10(4)>
Setting value number of .MEM_7 to .MEM_7 (changed)
Value numbering e_6 stmt = e_6 = e_1->next;
Setting value number of e_6 to e_6 (changed)
Value numbering e_1 stmt = e_1 = PHI <e_4(2), e_6(5)>
Setting value number of e_1 to e_1 (changed)
Value numbering .MEM_8 stmt = .MEM_8 = PHI <.MEM_9(D)(2), .MEM_7(5)>
Setting value number of .MEM_8 to .MEM_8 (changed)
Value numbering .MEM_10 stmt = mark_edge (e_1);
Setting value number of .MEM_10 to .MEM_10
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_8(3), .MEM_10(4)>
Setting value number of .MEM_7 to .MEM_7
Value numbering e_6 stmt = e_6 = e_1->next;
Setting value number of e_6 to e_6
Value numbering e_1 stmt = e_1 = PHI <e_4(2), e_6(5)>
Setting value number of e_1 to e_1
Value numbering .MEM_8 stmt = .MEM_8 = PHI <.MEM_9(D)(2), .MEM_7(5)>
Setting value number of .MEM_8 to .MEM_8
Value numbering .MEM_10 stmt = mark_edge (e_1);
Setting value number of .MEM_10 to .MEM_10
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_8(3), .MEM_10(4)>
Setting value number of .MEM_7 to .MEM_7
Value numbering e_6 stmt = e_6 = e_1->next;
Setting value number of e_6 to e_6
SCC consists of: D.5581_5 
Value numbering D.5581_5 stmt = D.5581_5 = e_1->type;
Setting value number of D.5581_5 to D.5581_5 (changed)
Value numbers:
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := {  }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004), e_1 (0001), D.5581_5 (0005) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004), e_1 (0001), D.5581_5 (0005) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004), e_1 (0001), D.5581_5 (0005), e_6 (0006) }
exp_gen[6] := {  }
phi_gen[6] := { e_1 (0001) }
tmp_gen[6] := {  }
avail_out[6] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004), e_1 (0001) }
exp_gen[7] := {  }
phi_gen[7] := {  }
tmp_gen[7] := {  }
avail_out[7] := { current_function.6_2 (0002), cfg_3 (0003), e_4 (0004), e_1 (0001) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }

Pass statistics:
----------------
SCC iterations == 3: 1

mark_edges ()
{
  struct edge * eD.4212;
  struct control_flow_graph * cfgD.4211;
  edge_type D.5581;
  struct function * current_function.6D.5580;

  # BLOCK 2 freq:900
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # VUSE <.MEMD.5613_9(D)>
  current_function.6D.5580_2 = current_functionD.4113;
  # VUSE <.MEMD.5613_9(D)>
  cfgD.4211_3 = current_function.6D.5580_2->cfgD.4162;
  # DEBUG cfgD.4211 => cfgD.4211_3
  # VUSE <.MEMD.5613_9(D)>
  eD.4212_4 = cfgD.4211_3->edgeD.4159;
  # DEBUG eD.4212 => eD.4212_4
  goto <bb 6>;
  # SUCC: 6 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:9100
  # PRED: 6 [91.0%]  (true,exec)
  # VUSE <.MEMD.5613_8>
  D.5581_5 = eD.4212_1->typeD.4133;
  if (D.5581_5 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;
  # SUCC: 4 [29.0%]  (true,exec) 5 [71.0%]  (false,exec)

  # BLOCK 4 freq:2639
  # PRED: 3 [29.0%]  (true,exec)
  # .MEMD.5613_10 = VDEF <.MEMD.5613_8>
  mark_edgeD.4204 (eD.4212_1);
  # SUCC: 5 [100.0%]  (fallthru,exec)

  # BLOCK 5 freq:9100
  # PRED: 3 [71.0%]  (false,exec) 4 [100.0%]  (fallthru,exec)
  # .MEMD.5613_7 = PHI <.MEMD.5613_8(3), .MEMD.5613_10(4)>
  # VUSE <.MEMD.5613_7>
  eD.4212_6 = eD.4212_1->nextD.4136;
  # DEBUG eD.4212 => eD.4212_6
  # SUCC: 6 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 6 freq:10000
  # PRED: 2 [100.0%]  (fallthru,exec) 5 [100.0%]  (fallthru,dfs_back,exec)
  # eD.4212_1 = PHI <eD.4212_4(2), eD.4212_6(5)>
  # .MEMD.5613_8 = PHI <.MEMD.5613_9(D)(2), .MEMD.5613_7(5)>
  # DEBUG eD.4212 => eD.4212_1
  if (eD.4212_1 != 0B)
    goto <bb 3>;
  else
    goto <bb 7>;
  # SUCC: 3 [91.0%]  (true,exec) 7 [9.0%]  (false,exec)

  # BLOCK 7 freq:900
  # PRED: 6 [9.0%]  (false,exec)
  return;
  # SUCC: EXIT [100.0%] 

}



;; Function calc_max_distance_recursive (calc_max_distance_recursive)


Pass statistics:
----------------

SCC consists of: .MEM_19(D) 
Setting value number of .MEM_19(D) to .MEM_19(D) (changed)
SCC consists of: bb_5(D) 
Setting value number of bb_5(D) to bb_5(D)
SCC consists of: ve_7 
Value numbering ve_7 stmt = ve_7 = bb_5(D)->pred;
Setting value number of ve_7 to ve_7 (changed)
SCC consists of: ve_3 .MEM_17 e_8 D.5576_10 .MEM_20 .MEM_16 ve_13 
Value numbering ve_3 stmt = ve_3 = PHI <ve_7(3), ve_13(7)>
Setting value number of ve_3 to ve_7 (changed)
Value numbering .MEM_17 stmt = .MEM_17 = PHI <.MEM_19(D)(3), .MEM_16(7)>
Setting value number of .MEM_17 to .MEM_19(D) (changed)
Value numbering e_8 stmt = e_8 = ve_3->edge;
Setting value number of e_8 to e_8 (changed)
Value numbering D.5576_10 stmt = D.5576_10 = e_8->source;
Setting value number of D.5576_10 to D.5576_10 (changed)
Value numbering .MEM_20 stmt = val_11 = calc_max_distance_recursive (D.5576_10);
Setting value number of .MEM_20 to .MEM_20 (changed)
Setting value number of val_11 to val_11 (changed)
Value numbering .MEM_16 stmt = .MEM_16 = PHI <.MEM_17(5), .MEM_20(6)>
Setting value number of .MEM_16 to .MEM_16 (changed)
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13 (changed)
Value numbering ve_3 stmt = ve_3 = PHI <ve_7(3), ve_13(7)>
Setting value number of ve_3 to ve_3 (changed)
Value numbering .MEM_17 stmt = .MEM_17 = PHI <.MEM_19(D)(3), .MEM_16(7)>
Setting value number of .MEM_17 to .MEM_17 (changed)
Value numbering e_8 stmt = e_8 = ve_3->edge;
Setting value number of e_8 to e_8
Value numbering D.5576_10 stmt = D.5576_10 = e_8->source;
Setting value number of D.5576_10 to D.5576_10
Value numbering .MEM_20 stmt = val_11 = calc_max_distance_recursive (D.5576_10);
Setting value number of .MEM_20 to .MEM_20
Setting value number of val_11 to val_11
Value numbering .MEM_16 stmt = .MEM_16 = PHI <.MEM_17(5), .MEM_20(6)>
Setting value number of .MEM_16 to .MEM_16
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13
Value numbering ve_3 stmt = ve_3 = PHI <ve_7(3), ve_13(7)>
Setting value number of ve_3 to ve_3
Value numbering .MEM_17 stmt = .MEM_17 = PHI <.MEM_19(D)(3), .MEM_16(7)>
Setting value number of .MEM_17 to .MEM_17
Value numbering e_8 stmt = e_8 = ve_3->edge;
Setting value number of e_8 to e_8
Value numbering D.5576_10 stmt = D.5576_10 = e_8->source;
Setting value number of D.5576_10 to D.5576_10
Value numbering .MEM_20 stmt = val_11 = calc_max_distance_recursive (D.5576_10);
Setting value number of .MEM_20 to .MEM_20
Setting value number of val_11 to val_11
Value numbering .MEM_16 stmt = .MEM_16 = PHI <.MEM_17(5), .MEM_20(6)>
Setting value number of .MEM_16 to .MEM_16
Value numbering ve_13 stmt = ve_13 = ve_3->next;
Setting value number of ve_13 to ve_13
SCC consists of: val_11 
SCC consists of: max_2 max_12 max_1 
Value numbering max_2 stmt = max_2 = PHI <0(3), max_1(7)>
Setting value number of max_2 to 0 (changed)
Value numbering max_12 stmt = max_12 = MAX_EXPR <val_11, max_2>;
Setting value number of max_12 to max_12 (changed)
Value numbering max_1 stmt = max_1 = PHI <max_2(5), max_12(6)>
Setting value number of max_1 to max_1 (changed)
Value numbering max_2 stmt = max_2 = PHI <0(3), max_1(7)>
Setting value number of max_2 to max_2 (changed)
Value numbering max_12 stmt = max_12 = MAX_EXPR <val_11, max_2>;
Setting value number of max_12 to max_12
Value numbering max_1 stmt = max_1 = PHI <max_2(5), max_12(6)>
Setting value number of max_1 to max_1
Value numbering max_2 stmt = max_2 = PHI <0(3), max_1(7)>
Setting value number of max_2 to max_2
Value numbering max_12 stmt = max_12 = MAX_EXPR <val_11, max_2>;
Setting value number of max_12 to max_12
Value numbering max_1 stmt = max_1 = PHI <max_2(5), max_12(6)>
Setting value number of max_1 to max_1
SCC consists of: D.5570_6 
Value numbering D.5570_6 stmt = D.5570_6 = bb_5(D)->max_distance;
Setting value number of D.5570_6 to D.5570_6 (changed)
SCC consists of: D.5573_9 
Value numbering D.5573_9 stmt = D.5573_9 = e_8->type;
Setting value number of D.5573_9 to D.5573_9 (changed)
SCC consists of: D.5577_14 
Value numbering D.5577_14 stmt = D.5577_14 = max_2 + 1;
Setting value number of D.5577_14 to D.5577_14 (changed)
SCC consists of: .MEM_21 
Value numbering .MEM_21 stmt = bb_5(D)->max_distance = D.5577_14;
No store match
Value numbering store bb_5(D)->max_distance to D.5577_14
Setting value number of .MEM_21 to .MEM_21 (changed)
SCC consists of: .MEM_18 
Value numbering .MEM_18 stmt = .MEM_18 = PHI <.MEM_19(D)(2), .MEM_21(9)>
Setting value number of .MEM_18 to .MEM_18 (changed)
SCC consists of: D.5578_15 
Value numbering D.5578_15 stmt = D.5578_15 = bb_5(D)->max_distance;
Setting value number of D.5578_15 to D.5578_15 (changed)
Value numbers:
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := { bb_5(D) (0004) }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { bb_5(D) (0004), D.5570_6 (0005) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003), e_8 (0007), D.5573_9 (0008) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003), e_8 (0007), D.5573_9 (0008) }
exp_gen[6] := {  }
phi_gen[6] := {  }
tmp_gen[6] := {  }
avail_out[6] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003), e_8 (0007), D.5573_9 (0008), D.5576_10 (0009), val_11 (0010), max_12 (0011) }
exp_gen[7] := {  }
phi_gen[7] := { max_1 (0001) }
tmp_gen[7] := {  }
avail_out[7] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003), e_8 (0007), D.5573_9 (0008), max_1 (0001), ve_13 (0012) }
exp_gen[8] := {  }
phi_gen[8] := { max_2 (0002), ve_3 (0003) }
tmp_gen[8] := {  }
avail_out[8] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003) }
exp_gen[9] := {  }
phi_gen[9] := {  }
tmp_gen[9] := {  }
avail_out[9] := { bb_5(D) (0004), D.5570_6 (0005), ve_7 (0006), max_2 (0002), ve_3 (0003), D.5577_14 (0013) }
exp_gen[10] := {  }
phi_gen[10] := {  }
tmp_gen[10] := {  }
avail_out[10] := { bb_5(D) (0004), D.5570_6 (0005), D.5578_15 (0014) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }

Pass statistics:
----------------
SCC iterations == 3: 2

calc_max_distance_recursive (struct basic_block * bbD.4216)
{
  struct edge * eD.4222;
  struct vec_edge * veD.4221;
  intD.0 maxD.4220;
  intD.0 valD.4219;
  intD.0 D.5578;
  intD.0 D.5577;
  struct basic_block * D.5576;
  edge_type D.5573;
  intD.0 D.5570;

  # BLOCK 2 freq:1475
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # DEBUG maxD.4220 => 0
  # VUSE <.MEMD.5614_19(D)>
  D.5570_6 = bbD.4216_5(D)->max_distanceD.4146;
  if (D.5570_6 == 0)
    goto <bb 3>;
  else
    goto <bb 10>;
  # SUCC: 3 [61.0%]  (true,exec) 10 [39.0%]  (false,exec)

  # BLOCK 3 freq:900
  # PRED: 2 [61.0%]  (true,exec)
  # VUSE <.MEMD.5614_19(D)>
  veD.4221_7 = bbD.4216_5(D)->predD.4147;
  # DEBUG veD.4221 => veD.4221_7
  goto <bb 8>;
  # SUCC: 8 [100.0%]  (fallthru,exec)

  # BLOCK 4 freq:9100
  # PRED: 8 [91.0%]  (true,exec)
  # VUSE <.MEMD.5614_17>
  eD.4222_8 = veD.4221_3->edgeD.4138;
  # DEBUG eD.4222 => eD.4222_8
  # VUSE <.MEMD.5614_17>
  D.5573_9 = eD.4222_8->typeD.4133;
  if (D.5573_9 == 3)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 [48.8%]  (true,exec) 6 [51.2%]  (false,exec)

  # BLOCK 5 freq:4438
  # PRED: 4 [48.8%]  (true,exec)
  goto <bb 7>;
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 6 freq:4662
  # PRED: 4 [51.2%]  (false,exec)
  # VUSE <.MEMD.5614_17>
  D.5576_10 = eD.4222_8->sourceD.4134;
  # .MEMD.5614_20 = VDEF <.MEMD.5614_17>
  valD.4219_11 = calc_max_distance_recursiveD.4217 (D.5576_10);
  # DEBUG valD.4219 => valD.4219_11
  maxD.4220_12 = MAX_EXPR <valD.4219_11, maxD.4220_2>;
  # DEBUG maxD.4220 => maxD.4220_12
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 7 freq:9100
  # PRED: 5 [100.0%]  (fallthru,exec) 6 [100.0%]  (fallthru,exec)
  # maxD.4220_1 = PHI <maxD.4220_2(5), maxD.4220_12(6)>
  # .MEMD.5614_16 = PHI <.MEMD.5614_17(5), .MEMD.5614_20(6)>
  # DEBUG maxD.4220 => maxD.4220_1
  # VUSE <.MEMD.5614_16>
  veD.4221_13 = veD.4221_3->nextD.4139;
  # DEBUG veD.4221 => veD.4221_13
  # SUCC: 8 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 8 freq:10000
  # PRED: 3 [100.0%]  (fallthru,exec) 7 [100.0%]  (fallthru,dfs_back,exec)
  # maxD.4220_2 = PHI <0(3), maxD.4220_1(7)>
  # veD.4221_3 = PHI <veD.4221_7(3), veD.4221_13(7)>
  # .MEMD.5614_17 = PHI <.MEMD.5614_19(D)(3), .MEMD.5614_16(7)>
  # DEBUG veD.4221 => veD.4221_3
  # DEBUG maxD.4220 => maxD.4220_2
  if (veD.4221_3 != 0B)
    goto <bb 4>;
  else
    goto <bb 9>;
  # SUCC: 4 [91.0%]  (true,exec) 9 [9.0%]  (false,exec)

  # BLOCK 9 freq:900
  # PRED: 8 [9.0%]  (false,exec)
  D.5577_14 = maxD.4220_2 + 1;
  # .MEMD.5614_21 = VDEF <.MEMD.5614_17>
  bbD.4216_5(D)->max_distanceD.4146 = D.5577_14;
  # SUCC: 10 [100.0%]  (fallthru,exec)

  # BLOCK 10 freq:1475
  # PRED: 2 [39.0%]  (false,exec) 9 [100.0%]  (fallthru,exec)
  # .MEMD.5614_18 = PHI <.MEMD.5614_19(D)(2), .MEMD.5614_21(9)>
  # VUSE <.MEMD.5614_18>
  D.5578_15 = bbD.4216_5(D)->max_distanceD.4146;
  return D.5578_15;
  # SUCC: EXIT [100.0%] 

}



;; Function calc_max_distance (calc_max_distance)


Pass statistics:
----------------

SCC consists of: .MEM_21(D) 
Setting value number of .MEM_21(D) to .MEM_21(D) (changed)
SCC consists of: .MEM_22 
Value numbering .MEM_22 stmt = depth_first_search ();
Setting value number of .MEM_22 to .MEM_22 (changed)
SCC consists of: .MEM_23 
Value numbering .MEM_23 stmt = mark_edges ();
Setting value number of .MEM_23 to .MEM_23 (changed)
SCC consists of: cfg.4_6 
Value numbering cfg.4_6 stmt = cfg.4_6 = cfg;
Setting value number of cfg.4_6 to cfg.4_6 (changed)
SCC consists of: D.5562_7 
Value numbering D.5562_7 stmt = D.5562_7 = cfg.4_6->exit;
Setting value number of D.5562_7 to D.5562_7 (changed)
SCC consists of: max_8 
Value numbering max_8 stmt = max_8 = calc_max_distance_recursive (D.5562_7);
Setting value number of .MEM_24 to .MEM_24 (changed)
Setting value number of max_8 to max_8 (changed)
SCC consists of: .MEM_24 
SCC consists of: cfg.4_9 
Value numbering cfg.4_9 stmt = cfg.4_9 = cfg;
Setting value number of cfg.4_9 to cfg.4_6 (changed)
SCC consists of: bb_10 
Value numbering bb_10 stmt = bb_10 = cfg.4_9->bb;
Setting value number of bb_10 to bb_10 (changed)
SCC consists of: bb_3 .MEM_20 .MEM_25 .MEM_19 bb_16 
Value numbering bb_3 stmt = bb_3 = PHI <bb_10(2), bb_16(7)>
Setting value number of bb_3 to bb_10 (changed)
Value numbering .MEM_20 stmt = .MEM_20 = PHI <.MEM_24(2), .MEM_19(7)>
Setting value number of .MEM_20 to .MEM_24 (changed)
Value numbering .MEM_25 stmt = val_12 = calc_max_distance_recursive (bb_3);
Setting value number of .MEM_25 to .MEM_25 (changed)
Setting value number of val_12 to val_12 (changed)
Value numbering .MEM_19 stmt = .MEM_19 = PHI <.MEM_20(3), .MEM_25(6)>
Setting value number of .MEM_19 to .MEM_19 (changed)
Value numbering bb_16 stmt = bb_16 = bb_3->next;
Setting value number of bb_16 to bb_16 (changed)
Value numbering bb_3 stmt = bb_3 = PHI <bb_10(2), bb_16(7)>
Setting value number of bb_3 to bb_3 (changed)
Value numbering .MEM_20 stmt = .MEM_20 = PHI <.MEM_24(2), .MEM_19(7)>
Setting value number of .MEM_20 to .MEM_20 (changed)
Value numbering .MEM_25 stmt = val_12 = calc_max_distance_recursive (bb_3);
Setting value number of .MEM_25 to .MEM_25
Setting value number of val_12 to val_12
Value numbering .MEM_19 stmt = .MEM_19 = PHI <.MEM_20(3), .MEM_25(6)>
Setting value number of .MEM_19 to .MEM_19
Value numbering bb_16 stmt = bb_16 = bb_3->next;
Setting value number of bb_16 to bb_16
Value numbering bb_3 stmt = bb_3 = PHI <bb_10(2), bb_16(7)>
Setting value number of bb_3 to bb_3
Value numbering .MEM_20 stmt = .MEM_20 = PHI <.MEM_24(2), .MEM_19(7)>
Setting value number of .MEM_20 to .MEM_20
Value numbering .MEM_25 stmt = val_12 = calc_max_distance_recursive (bb_3);
Setting value number of .MEM_25 to .MEM_25
Setting value number of val_12 to val_12
Value numbering .MEM_19 stmt = .MEM_19 = PHI <.MEM_20(3), .MEM_25(6)>
Setting value number of .MEM_19 to .MEM_19
Value numbering bb_16 stmt = bb_16 = bb_3->next;
Setting value number of bb_16 to bb_16
SCC consists of: val_12 
SCC consists of: max_13 
Value numbering max_13 stmt = max_13 = val_12 + 1;
Setting value number of max_13 to max_13 (changed)
SCC consists of: max_2 max_4 max_1 
Value numbering max_2 stmt = max_2 = PHI <max_8(2), max_1(7)>
Setting value number of max_2 to max_8 (changed)
Value numbering max_4 stmt = max_4 = PHI <max_13(5), max_2(4)>
Setting value number of max_4 to max_4 (changed)
Value numbering max_1 stmt = max_1 = PHI <max_2(3), max_4(6)>
Setting value number of max_1 to max_1 (changed)
Value numbering max_2 stmt = max_2 = PHI <max_8(2), max_1(7)>
Setting value number of max_2 to max_2 (changed)
Value numbering max_4 stmt = max_4 = PHI <max_13(5), max_2(4)>
Setting value number of max_4 to max_4
Value numbering max_1 stmt = max_1 = PHI <max_2(3), max_4(6)>
Setting value number of max_1 to max_1
Value numbering max_2 stmt = max_2 = PHI <max_8(2), max_1(7)>
Setting value number of max_2 to max_2
Value numbering max_4 stmt = max_4 = PHI <max_13(5), max_2(4)>
Setting value number of max_4 to max_4
Value numbering max_1 stmt = max_1 = PHI <max_2(3), max_4(6)>
Setting value number of max_1 to max_1
SCC consists of: D.5563_11 
Value numbering D.5563_11 stmt = D.5563_11 = bb_3->max_distance;
Setting value number of D.5563_11 to D.5563_11 (changed)
SCC consists of: cfg.4_17 
Value numbering cfg.4_17 stmt = cfg.4_17 = cfg;
Setting value number of cfg.4_17 to cfg.4_6 (changed)
SCC consists of: D.5562_18 
Value numbering D.5562_18 stmt = D.5562_18 = cfg.4_17->exit;
Setting value number of D.5562_18 to D.5562_18 (changed)
Value numbers:
cfg.4_9 = cfg.4_6
cfg.4_17 = cfg.4_6
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := {  }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5563_11 (0009) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5563_11 (0009), val_12 (0010) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5563_11 (0009), val_12 (0010), max_13 (0011) }
exp_gen[6] := {  }
phi_gen[6] := { max_4 (0004) }
tmp_gen[6] := {  }
avail_out[6] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5563_11 (0009), val_12 (0010), max_4 (0004) }
exp_gen[7] := {  }
phi_gen[7] := { max_1 (0001) }
tmp_gen[7] := {  }
avail_out[7] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5563_11 (0009), max_1 (0001), bb_16 (0012) }
exp_gen[8] := {  }
phi_gen[8] := { max_2 (0002), bb_3 (0003) }
tmp_gen[8] := {  }
avail_out[8] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003) }
exp_gen[9] := {  }
phi_gen[9] := {  }
tmp_gen[9] := {  }
avail_out[9] := { cfg.4_6 (0005), D.5562_7 (0006), max_8 (0007), bb_10 (0008), max_2 (0002), bb_3 (0003), D.5562_18 (0013) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }
Replaced cfg with cfg.4_6 in cfg.4_9 = cfg;
Replaced cfg with cfg.4_6 in cfg.4_17 = cfg;

Pass statistics:
----------------
SCC iterations == 3: 2
Eliminated: 2

calc_max_distance ()
{
  struct basic_block * bbD.4232;
  intD.0 maxD.4231;
  intD.0 valD.4230;
  intD.0 D.5563;
  struct basic_block * D.5562;
  struct control_flow_graph * cfg.4D.5561;

  # BLOCK 2 freq:900
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # DEBUG maxD.4231 => 0
  # .MEMD.5615_22 = VDEF <.MEMD.5615_21(D)>
  depth_first_searchD.4185 ();
  # .MEMD.5615_23 = VDEF <.MEMD.5615_22>
  mark_edgesD.4209 ();
  # VUSE <.MEMD.5615_23>
  cfg.4D.5561_6 = cfgD.4174;
  # VUSE <.MEMD.5615_23>
  D.5562_7 = cfg.4D.5561_6->exitD.4156;
  # .MEMD.5615_24 = VDEF <.MEMD.5615_23>
  maxD.4231_8 = calc_max_distance_recursiveD.4217 (D.5562_7);
  # DEBUG maxD.4231 => maxD.4231_8
  cfg.4D.5561_9 = cfg.4D.5561_6;
  # VUSE <.MEMD.5615_24>
  bbD.4232_10 = cfg.4D.5561_9->bbD.4157;
  # DEBUG bbD.4232 => bbD.4232_10
  goto <bb 8>;
  # SUCC: 8 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:9100
  # PRED: 8 [91.0%]  (true,exec)
  # VUSE <.MEMD.5615_20>
  D.5563_11 = bbD.4232_3->max_distanceD.4146;
  if (D.5563_11 == 0)
    goto <bb 4>;
  else
    goto <bb 7>;
  # SUCC: 4 [29.0%]  (true,exec) 7 [71.0%]  (false,exec)

  # BLOCK 4 freq:2639
  # PRED: 3 [29.0%]  (true,exec)
  # .MEMD.5615_25 = VDEF <.MEMD.5615_20>
  valD.4230_12 = calc_max_distance_recursiveD.4217 (bbD.4232_3);
  # DEBUG valD.4230 => valD.4230_12
  if (maxD.4231_2 <= valD.4230_12)
    goto <bb 5>;
  else
    goto <bb 6>;
  # SUCC: 5 [50.0%]  (true,exec) 6 [50.0%]  (false,exec)

  # BLOCK 5 freq:1319
  # PRED: 4 [50.0%]  (true,exec)
  maxD.4231_13 = valD.4230_12 + 1;
  # SUCC: 6 [100.0%]  (fallthru,exec)

  # BLOCK 6 freq:2639
  # PRED: 5 [100.0%]  (fallthru,exec) 4 [50.0%]  (false,exec)
  # maxD.4231_4 = PHI <maxD.4231_13(5), maxD.4231_2(4)>
  # DEBUG maxD.4231 => maxD.4231_4
  # SUCC: 7 [100.0%]  (fallthru,exec)

  # BLOCK 7 freq:9100
  # PRED: 3 [71.0%]  (false,exec) 6 [100.0%]  (fallthru,exec)
  # maxD.4231_1 = PHI <maxD.4231_2(3), maxD.4231_4(6)>
  # .MEMD.5615_19 = PHI <.MEMD.5615_20(3), .MEMD.5615_25(6)>
  # DEBUG maxD.4231 => maxD.4231_1
  # VUSE <.MEMD.5615_19>
  bbD.4232_16 = bbD.4232_3->nextD.4151;
  # DEBUG bbD.4232 => bbD.4232_16
  # SUCC: 8 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 8 freq:10000
  # PRED: 2 [100.0%]  (fallthru,exec) 7 [100.0%]  (fallthru,dfs_back,exec)
  # maxD.4231_2 = PHI <maxD.4231_8(2), maxD.4231_1(7)>
  # bbD.4232_3 = PHI <bbD.4232_10(2), bbD.4232_16(7)>
  # .MEMD.5615_20 = PHI <.MEMD.5615_24(2), .MEMD.5615_19(7)>
  # DEBUG bbD.4232 => bbD.4232_3
  # DEBUG maxD.4231 => maxD.4231_2
  if (bbD.4232_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
  # SUCC: 3 [91.0%]  (true,exec) 9 [9.0%]  (false,exec)

  # BLOCK 9 freq:900
  # PRED: 8 [9.0%]  (false,exec)
  cfg.4D.5561_17 = cfg.4D.5561_6;
  # VUSE <.MEMD.5615_20>
  D.5562_18 = cfg.4D.5561_17->exitD.4156;
  # .MEMD.5615_26 = VDEF <.MEMD.5615_20>
  D.5562_18->max_distanceD.4146 = maxD.4231_2;
  return;
  # SUCC: EXIT [100.0%] 

}



;; Function fine_tune_cfg (fine_tune_cfg)


Pass statistics:
----------------

SCC consists of: .MEM_8(D) 
Setting value number of .MEM_8(D) to .MEM_8(D) (changed)
SCC consists of: first_function.0_1 
Value numbering first_function.0_1 stmt = first_function.0_1 = first_function;
Setting value number of first_function.0_1 to first_function.0_1 (changed)
SCC consists of: .MEM_9 
Value numbering .MEM_9 stmt = current_function = first_function.0_1;
No store match
Value numbering store current_function to first_function.0_1
Setting value number of .MEM_9 to .MEM_9 (changed)
SCC consists of: .MEM_7 current_function.1_3 cfg.2_4 .MEM_10 .MEM_11 current_function.1_5 current_function.3_6 .MEM_12 
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_9(2), .MEM_12(3)>
Setting value number of .MEM_7 to .MEM_9 (changed)
Value numbering current_function.1_3 stmt = current_function.1_3 = current_function;
Setting value number of current_function.1_3 to first_function.0_1 (changed)
Value numbering cfg.2_4 stmt = cfg.2_4 = current_function.1_3->cfg;
Setting value number of cfg.2_4 to cfg.2_4 (changed)
Value numbering .MEM_10 stmt = cfg = cfg.2_4;
No store match
Value numbering store cfg to cfg.2_4
Setting value number of .MEM_10 to .MEM_10 (changed)
Value numbering .MEM_11 stmt = calc_max_distance ();
Setting value number of .MEM_11 to .MEM_11 (changed)
Value numbering current_function.1_5 stmt = current_function.1_5 = current_function;
Setting value number of current_function.1_5 to current_function.1_5 (changed)
Value numbering current_function.3_6 stmt = current_function.3_6 = current_function.1_5->next;
Setting value number of current_function.3_6 to current_function.3_6 (changed)
Value numbering .MEM_12 stmt = current_function = current_function.3_6;
No store match
Value numbering store current_function to current_function.3_6
Setting value number of .MEM_12 to .MEM_12 (changed)
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_9(2), .MEM_12(3)>
Setting value number of .MEM_7 to .MEM_7 (changed)
Value numbering current_function.1_3 stmt = current_function.1_3 = current_function;
Setting value number of current_function.1_3 to current_function.1_3 (changed)
Value numbering cfg.2_4 stmt = cfg.2_4 = current_function.1_3->cfg;
Setting value number of cfg.2_4 to cfg.2_4
Value numbering .MEM_10 stmt = cfg = cfg.2_4;
No store match
Value numbering store cfg to cfg.2_4
Setting value number of .MEM_10 to .MEM_10
Value numbering .MEM_11 stmt = calc_max_distance ();
Setting value number of .MEM_11 to .MEM_11
Value numbering current_function.1_5 stmt = current_function.1_5 = current_function;
Setting value number of current_function.1_5 to current_function.1_5
Value numbering current_function.3_6 stmt = current_function.3_6 = current_function.1_5->next;
Setting value number of current_function.3_6 to current_function.3_6
Value numbering .MEM_12 stmt = current_function = current_function.3_6;
No store match
Value numbering store current_function to current_function.3_6
Setting value number of .MEM_12 to .MEM_12
Value numbering .MEM_7 stmt = .MEM_7 = PHI <.MEM_9(2), .MEM_12(3)>
Setting value number of .MEM_7 to .MEM_7
Value numbering current_function.1_3 stmt = current_function.1_3 = current_function;
Setting value number of current_function.1_3 to current_function.1_3
Value numbering cfg.2_4 stmt = cfg.2_4 = current_function.1_3->cfg;
Setting value number of cfg.2_4 to cfg.2_4
Value numbering .MEM_10 stmt = cfg = cfg.2_4;
No store match
Value numbering store cfg to cfg.2_4
Setting value number of .MEM_10 to .MEM_10
Value numbering .MEM_11 stmt = calc_max_distance ();
Setting value number of .MEM_11 to .MEM_11
Value numbering current_function.1_5 stmt = current_function.1_5 = current_function;
Setting value number of current_function.1_5 to current_function.1_5
Value numbering current_function.3_6 stmt = current_function.3_6 = current_function.1_5->next;
Setting value number of current_function.3_6 to current_function.3_6
Value numbering .MEM_12 stmt = current_function = current_function.3_6;
No store match
Value numbering store current_function to current_function.3_6
Setting value number of .MEM_12 to .MEM_12
SCC consists of: current_function.1_2 
Value numbering current_function.1_2 stmt = current_function.1_2 = current_function;
Setting value number of current_function.1_2 to current_function.1_3 (changed)
Value numbers:
current_function.1_2 = current_function.1_3
exp_gen[0] := {  }
phi_gen[0] := {  }
tmp_gen[0] := {  }
avail_out[0] := {  }
exp_gen[2] := {  }
phi_gen[2] := {  }
tmp_gen[2] := {  }
avail_out[2] := { first_function.0_1 (0001) }
exp_gen[3] := {  }
phi_gen[3] := {  }
tmp_gen[3] := {  }
avail_out[3] := { first_function.0_1 (0001), current_function.1_2 (0002), cfg.2_4 (0003), current_function.1_5 (0004), current_function.3_6 (0005) }
exp_gen[4] := {  }
phi_gen[4] := {  }
tmp_gen[4] := {  }
avail_out[4] := { first_function.0_1 (0001), current_function.1_2 (0002) }
exp_gen[5] := {  }
phi_gen[5] := {  }
tmp_gen[5] := {  }
avail_out[5] := { first_function.0_1 (0001), current_function.1_2 (0002) }
exp_gen[1] := {  }
phi_gen[1] := {  }
tmp_gen[1] := {  }
avail_out[1] := {  }
Replaced current_function with current_function.1_2 in current_function.1_3 = current_function;

Pass statistics:
----------------
SCC iterations == 3: 1
Eliminated: 1

fine_tune_cfg ()
{
  struct function * current_function.3D.5560;
  struct control_flow_graph * cfg.2D.5559;
  struct function * current_function.1D.5558;
  struct function * first_function.0D.5557;

  # BLOCK 2 freq:900
  # PRED: ENTRY [100.0%]  (fallthru,exec)
  # VUSE <.MEMD.5616_8(D)>
  first_function.0D.5557_1 = first_functionD.4111;
  # .MEMD.5616_9 = VDEF <.MEMD.5616_8(D)>
  current_functionD.4113 = first_function.0D.5557_1;
  goto <bb 4>;
  # SUCC: 4 [100.0%]  (fallthru,exec)

  # BLOCK 3 freq:9100
  # PRED: 4 [91.0%]  (true,exec)
  current_function.1D.5558_3 = current_function.1D.5558_2;
  # VUSE <.MEMD.5616_7>
  cfg.2D.5559_4 = current_function.1D.5558_3->cfgD.4162;
  # .MEMD.5616_10 = VDEF <.MEMD.5616_7>
  cfgD.4174 = cfg.2D.5559_4;
  # .MEMD.5616_11 = VDEF <.MEMD.5616_10>
  calc_max_distanceD.4228 ();
  # VUSE <.MEMD.5616_11>
  current_function.1D.5558_5 = current_functionD.4113;
  # VUSE <.MEMD.5616_11>
  current_function.3D.5560_6 = current_function.1D.5558_5->nextD.4163;
  # .MEMD.5616_12 = VDEF <.MEMD.5616_11>
  current_functionD.4113 = current_function.3D.5560_6;
  # SUCC: 4 [100.0%]  (fallthru,dfs_back,exec)

  # BLOCK 4 freq:10000
  # PRED: 2 [100.0%]  (fallthru,exec) 3 [100.0%]  (fallthru,dfs_back,exec)
  # .MEMD.5616_7 = PHI <.MEMD.5616_9(2), .MEMD.5616_12(3)>
  # VUSE <.MEMD.5616_7>
  current_function.1D.5558_2 = current_functionD.4113;
  if (current_function.1D.5558_2 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
  # SUCC: 3 [91.0%]  (true,exec) 5 [9.0%]  (false,exec)

  # BLOCK 5 freq:900
  # PRED: 4 [9.0%]  (false,exec)
  return;
  # SUCC: EXIT [100.0%] 

}


